// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "OI.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoOneBall.h"
#include "Commands/CatapultForwardSlow.h"
#include "Commands/CatapultOff.h"
#include "Commands/CatapultPincherToggle.h"
#include "Commands/CatapultReverseSlow.h"
#include "Commands/CatapultShoot.h"
#include "Commands/ChassisReverseDrive.h"
#include "Commands/ChassisTankDrive.h"
#include "Commands/HuggerToggle.h"
#include "Commands/IntakeMaintain.h"
#include "Commands/IntakeOn.h"
#include "Commands/IntakeReverse.h"
#include "Commands/IntakeToggle.h"
#include "Commands/PressurizerCompress.h"
#include "Commands/ShifterShift.h"
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
OI::OI() {
	// Process operator interface input here.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CON  mSTRUCTORS
	coDriver = new Joystick(2);
	
	cLeftStick = new JoystickButton(coDriver, 9);
	cLeftStick->WhenPressed(new CatapultPincherToggle());
	cButtonX = new JoystickButton(coDriver, 3);
	cButtonX->WhenPressed(new HuggerToggle());
	cButtonY = new JoystickButton(coDriver, 4);
	cButtonY->WhenPressed(new IntakeToggle());
	cButtonB = new JoystickButton(coDriver, 2);
	cButtonB->WhileHeld(new IntakeReverse());
	cButtonA = new JoystickButton(coDriver, 1);
	cButtonA->WhenPressed(new IntakeOn());
	cRBumper = new JoystickButton(coDriver, 6);
	cRBumper->WhileHeld(new CatapultForwardSlow());
	driver = new Joystick(1);
	
	dRightBumper = new JoystickButton(driver, 6);
	dRightBumper->WhenPressed(new ChassisReverseDrive());
	dButtonB = new JoystickButton(driver, 2);
	dButtonB->WhileHeld(new CatapultReverseSlow());
	dButtonA = new JoystickButton(driver, 1);
	dButtonA->WhileHeld(new CatapultForwardSlow());
	dLeftStick = new JoystickButton(driver, 9);
	dLeftStick->WhenPressed(new ShifterShift());
     
        // SmartDashboard Buttons
	SmartDashboard::PutData("AutoOneBall", new AutoOneBall());
	SmartDashboard::PutData("ChassisTankDrive", new ChassisTankDrive());
	SmartDashboard::PutData("IntakeOn", new IntakeOn());
	SmartDashboard::PutData("PressurizerCompress", new PressurizerCompress());
	SmartDashboard::PutData("ShifterShift", new ShifterShift());
	SmartDashboard::PutData("CatapultOff", new CatapultOff());
	SmartDashboard::PutData("CatapultForwardSlow", new CatapultForwardSlow());
	SmartDashboard::PutData("CatapultReverseSlow", new CatapultReverseSlow());
	SmartDashboard::PutData("IntakeReverse", new IntakeReverse());
	SmartDashboard::PutData("IntakeToggle", new IntakeToggle());
	SmartDashboard::PutData("HuggerToggle", new HuggerToggle());
	SmartDashboard::PutData("CatapultPincherToggle", new CatapultPincherToggle());
	SmartDashboard::PutData("ChassisReverseDrive", new ChassisReverseDrive());
	SmartDashboard::PutData("IntakeMaintain", new IntakeMaintain());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
Joystick* OI::getCoDriver() {
	return coDriver;
}
Joystick* OI::getDriver() {
	return driver;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
